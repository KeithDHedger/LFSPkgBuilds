*** webkitgtk/Source/JavaScriptCore/API/JSStringRef.cpp	2020-11-13 16:56:40.978061633 +0000
--- webkitgtk/Source/JavaScriptCore/API/JSStringRef.cpp.mycopy	2020-11-13 16:56:57.426114826 +0000
***************
*** 37,43 ****
  JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars)
  {
      initializeThreading();
!     return OpaqueJSString::create(chars, numChars).leakRef();
  }
  
  JSStringRef JSStringCreateWithUTF8CString(const char* string)
--- 37,43 ----
  JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars)
  {
      initializeThreading();
!     return OpaqueJSString::create((const UChar*)(UChar*)chars, numChars).leakRef();
  }
  
  JSStringRef JSStringCreateWithUTF8CString(const char* string)
***************
*** 51,57 ****
          const LChar* stringStart = reinterpret_cast<const LChar*>(string);
          if (conversionOK == convertUTF8ToUTF16(&string, string + length, &p, p + length, &sourceIsAllASCII)) {
              if (sourceIsAllASCII)
!                 return OpaqueJSString::create(stringStart, length).leakRef();
              return OpaqueJSString::create(buffer.data(), p - buffer.data()).leakRef();
          }
      }
--- 51,57 ----
          const LChar* stringStart = reinterpret_cast<const LChar*>(string);
          if (conversionOK == convertUTF8ToUTF16(&string, string + length, &p, p + length, &sourceIsAllASCII)) {
              if (sourceIsAllASCII)
!                 return OpaqueJSString::create((const UChar*)(UChar*)stringStart, length).leakRef();
              return OpaqueJSString::create(buffer.data(), p - buffer.data()).leakRef();
          }
      }
***************
*** 62,68 ****
  JSStringRef JSStringCreateWithCharactersNoCopy(const JSChar* chars, size_t numChars)
  {
      initializeThreading();
!     return OpaqueJSString::create(StringImpl::createWithoutCopying(chars, numChars)).leakRef();
  }
  
  JSStringRef JSStringRetain(JSStringRef string)
--- 62,68 ----
  JSStringRef JSStringCreateWithCharactersNoCopy(const JSChar* chars, size_t numChars)
  {
      initializeThreading();
!     return OpaqueJSString::create(StringImpl::createWithoutCopying((const UChar*)(UChar*)chars, numChars)).leakRef();
  }
  
  JSStringRef JSStringRetain(JSStringRef string)
***************
*** 83,89 ****
  
  const JSChar* JSStringGetCharactersPtr(JSStringRef string)
  {
!     return string->characters();
  }
  
  size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
--- 83,89 ----
  
  const JSChar* JSStringGetCharactersPtr(JSStringRef string)
  {
!     return (JSChar*)string->characters();
  }
  
  size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
